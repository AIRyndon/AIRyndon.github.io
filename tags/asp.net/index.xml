<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ASP.NET on Angelo Corleone</title>
        <link>https://angelocorleone.com/tags/asp.net/</link>
        <description>Recent content in ASP.NET on Angelo Corleone</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 10 Nov 2020 21:12:01 +1300</lastBuildDate><atom:link href="https://angelocorleone.com/tags/asp.net/index.xml" rel="self" type="application/rss+xml" />
        <item>
            <title>Render scripts from Partial Views in ASP.NET MVC 5</title>
            <link>https://angelocorleone.com/2020/11/render-scripts-from-partial-view-aspnet-mvc/</link>
            <pubDate>Tue, 10 Nov 2020 21:12:01 +1300</pubDate>
            
            <guid>https://angelocorleone.com/2020/11/render-scripts-from-partial-view-aspnet-mvc/</guid>
            <description>&lt;h2 id=&#34;scenario&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#scenario&#34;&gt;Scenario&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You want to render a script specific for your partial view only (usually after an ajax call), however the script is dependent on another script being loaded - like JQuery - and sadly, you are not using javascript modules.&lt;/p&gt;

&lt;h2 id=&#34;issue&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#issue&#34;&gt;Issue&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Partial Views in ASP.NET MVC do not support section areas&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@section scripts{
    //not supported in Partial Views :(
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;workaround-one&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#workaround-one&#34;&gt;Workaround One&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Trigger a custom event when your ajax call has finished updating the page&amp;rsquo;s html&lt;/li&gt;
&lt;li&gt;Immediately call an event listener on the Partial View that wants some script loaded (use an IIFE)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sample-code&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#sample-code&#34;&gt;Sample Code&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;public static firePartialViewEvent(): void
{
    /*
    * longer way of writing is to maintain IE compatibility
    * https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events
    *
    */
    const loadEvent = document.createEvent(&#39;Event&#39;);
    loadEvent.initEvent(&#39;finished:loading&#39;, true, true);
    document.querySelector(&#39;body&#39;).dispatchEvent(loadEvent);
}

/**
* Call this from the partial view&#39;s script, if doing an ajax request
* @param script the partial view script to call
*/
public static loadPartialViewScript(script: () =&amp;gt; void): void
{
    const body = document.querySelector(&#39;body&#39;);
    const options: AddEventListenerOptions = {
        once: true,
    }

    body.addEventListener(&#39;finished:loading&#39;, () =&amp;gt;
    {
        script();
    }, options);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;

&lt;h4 id=&#34;usage&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#usage&#34;&gt;Usage&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;//in your JavaScript/TypeScript file&#39;s ajax call
$.get(&amp;lt;blah blah&amp;gt;).done(() =&amp;gt; firePartialViewEvent());

//in your Partial View
@if (Request.IsAjaxRequest()) // you usually only want to call this in an ajax request where the main view is ideally not returned
{
    &amp;lt;script&amp;gt;
        (() =&amp;gt;
        {
            loadPartialViewScript(() =&amp;gt; &amp;lt;your partial view script&amp;gt;);
        })();
    &amp;lt;/script&amp;gt;
}
//and in your main view you have the usual  @section scripts that will render the needed scripts of the Partial View (duplicate call)
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;

&lt;h2 id=&#34;workaround-two&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#workaround-two&#34;&gt;Workaround Two&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;put the IIFE that calls your partial view in a separate script file&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt; in the Partial View&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;sample-code-1&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#sample-code-1&#34;&gt;Sample Code&lt;/a&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;//on a JS file somewhere (i.e partial-view-caller.js)
(() =&amp;gt; &amp;lt;your partial view script&amp;gt;)();

//in your Partial View
&amp;lt;script src=&amp;quot;~/partial-view-caller.js&amp;quot; defer&amp;gt;&amp;lt;/script&amp;gt;

//you can actually just straight call your partial view script living in an external file - I just prefer having an initialization method :)
&lt;/code&gt;&lt;/pre&gt;
&lt;br/&gt;

&lt;h4 id=&#34;closing-thoughts&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#closing-thoughts&#34;&gt;Closing thoughts&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I personally prefer &lt;strong&gt;Workaround Two&lt;/strong&gt; for its simplicity. However, I implemented &lt;strong&gt;Workaround One&lt;/strong&gt; first - cause I&amp;rsquo;m an idiot who didn&amp;rsquo;t know how to properly use defer :D &lt;br/&gt;
&lt;br/&gt;
However, &lt;strong&gt;Workaround One&lt;/strong&gt; is in my opinion the ideal way in case you want to pass some data from your C# ViewModel to that Partial View script, which is also a common scenario. Therefore, both methods are useful - it depends on your situation.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Migrate Asp.net MVC that references .NET standard 2.0 from version 4.6 to 4.8</title>
            <link>https://angelocorleone.com/2020/11/migrate-asp-net-mvc-to-net48/</link>
            <pubDate>Sun, 08 Nov 2020 11:56:35 +1300</pubDate>
            
            <guid>https://angelocorleone.com/2020/11/migrate-asp-net-mvc-to-net48/</guid>
            <description>
&lt;h2 id=&#34;steps&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#steps&#34;&gt;Steps&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Visual Studio, change project target framework to 4.8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebuild the project - if you get a warning about a package that needs to be reinstalled, you can reinstall it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I also went to packages.config and renamed the targetFramework from net461 to net48 - not sure if that is needed
If this project is being referenced by other projects&lt;/p&gt;
&lt;p&gt;Remove the reference and add it again if you get a &amp;ldquo;Could not load file or assembly error&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add binding redirect, to do this add these to the project&amp;rsquo;s .csproj file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;PropertyGroup&amp;gt;
      &amp;lt;AutoGenerateBindingRedirects&amp;gt;true&amp;lt;/AutoGenerateBindingRedirects&amp;gt;
      &amp;lt;GenerateBindingRedirectsOutputType&amp;gt;true&amp;lt;/GenerateBindingRedirectsOutputType&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then reload the project, and rebuild it - in its bin folder, there should be a (project-name).dll.config file. look for the &lt;code&gt;&amp;lt;runtime&amp;gt;&lt;/code&gt; node inside that file and copy all the &lt;code&gt;&amp;lt;assemblyBinding&amp;gt;&lt;/code&gt; into the project&amp;rsquo;s Web.config &lt;code&gt;&amp;lt;runtime&amp;gt;&lt;/code&gt; node (btw, the runtime node should usually just be a direct child of the &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt; node). You can now delete the &lt;code&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/code&gt; node you just added earlier&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you get errors in your razor .cshtml that it can&amp;rsquo;t recognize types from your .netstandard project
In the project&amp;rsquo;s Web.config, go in &lt;code&gt;&amp;lt;system.web&amp;gt;&lt;/code&gt; and add&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;compilation debug=&amp;quot;true&amp;quot; targetFramework=&amp;quot;4.8&amp;quot;&amp;gt;
      &amp;lt;assemblies&amp;gt;
          &amp;lt;add assembly=&amp;quot;netstandard, Version=&amp;lt;your-version&amp;gt;, Culture=neutral, PublicKeyToken=&amp;lt;its-keyToken&amp;gt;&amp;quot; /&amp;gt;
      &amp;lt;/assemblies&amp;gt;
  &amp;lt;/compilation&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully that would settle those errors. This is what worked for me, after hours of Googling and reading comments in Github and Stackoverflow posts. I also thought about the AutoGenerateBinding, and GenerateBindingRedirectsOutputType - since it generates a .config file in the bin folder, perhaps we don&amp;rsquo;t need to delete the lines below from the .csproj file - so we won&amp;rsquo;t need to copy the &lt;code&gt;&amp;lt;assemblyBinding&amp;gt;&lt;/code&gt; into Web.config (I didn&amp;rsquo;t test this though)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;AutoGenerateBindingRedirects&amp;gt;true&amp;lt;/AutoGenerateBindingRedirects&amp;gt;
    &amp;lt;GenerateBindingRedirectsOutputType&amp;gt;true&amp;lt;/GenerateBindingRedirectsOutputType&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Learning ASP.NET Core</title>
            <link>https://angelocorleone.com/2019/04/learning-asp-net-core/</link>
            <pubDate>Tue, 16 Apr 2019 00:57:22 +0000</pubDate>
            
            <guid>https://angelocorleone.com/2019/04/learning-asp-net-core/</guid>
            <description>&lt;p&gt;For the last few days, I’ve started learning ASP.NET Core. After the initial &lt;a rel=&#34;noreferrer noopener&#34; aria-label=&#34;research (opens in a new tab)&#34; href=&#34;https://angelocorleone.com/researching-on-a-uwp-application-for-a-client/&#34; target=&#34;_blank&#34;&gt;research&lt;/a&gt; on how to build the UWP project for a client of mine, I think my idea of using ASP.NET Core Identity could actually work for this project. Since I don’t know how to use ASP.NET Core yet, I think I want to get comfortable with using it with a Web UI first before I go and build just an API using it. I’m currently watching a Pluralsight &lt;a rel=&#34;noreferrer noopener&#34; aria-label=&#34;course (opens in a new tab)&#34; href=&#34;https://www.pluralsight.com/courses/aspnet-core-fundamentals&#34; target=&#34;_blank&#34;&gt;course&lt;/a&gt; about it by Scott Allen, I’ll be writing down what I found different on ASP.NET Core compared to ASP.NET MVC to make the idea stick.&lt;/p&gt;
&lt;h2 id=&#34;quick-overview-of-model-binding-in-aspnet-core&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#quick-overview-of-model-binding-in-aspnet-core&#34;&gt;Quick overview of Model Binding in ASP.NET Core&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The framework needs a matching name in the parameter of the C# method, and in an input inside the Razor View. There are different ways to get data from a request in ASP.NET core. One is using the HttpContext, and the other is model binding. Using the HttpContext for model binding is not considered the best approach according to Scott.&lt;/p&gt;
&lt;p&gt;When you make an http request (invoke a method from the PageModel/Controller), the framework’s model binder looks in the posted form values, query string, and http headers. You can even make your own custom model binder. The goal of model binding is to move info from the request into an input model.&lt;/p&gt;
&lt;p&gt;When the parameter to the method called by the framework (OnGet for example) does not contain anything, ASP.NET Core will default to null if the parameter is a reference type, and throw an exception if the parameter is a value type.&lt;/p&gt;

&lt;h2 id=&#34;tag-helpers&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#tag-helpers&#34;&gt;Tag Helpers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These tag helpers are new to me – I don’t remember it existed before ASP.NET Core – and they remind me of those tags used by AngularJS. The three that I encountered in the course are asp-page, asp-for, and asp-route-&lt;anything&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;asp-page&lt;/strong&gt; tag helper sets an anchor tag to point to a Razor page. On the other hand, the &lt;strong&gt;asp-for&lt;/strong&gt; tag helper is used to bind a C# property to the html. This tag helper works on inputs and labels. Note that you don’t need to type Model.&lt;Property&gt; to access a property when inside the asp-for tag helper, it assumes you are inside the current model. The asp-for helper in a way does two-way binding.&lt;/p&gt;
&lt;p&gt;First, it sets the html input’s name property, the model binder will try to match this name to a C# property once it checks the query string, route data, etc. when you make an http request – &lt;strong&gt;input model&lt;/strong&gt;. Second, it fills the html input’s value when the server populates the page (responds to the request) with values from the Page Model property – &lt;strong&gt;output model&lt;/strong&gt;. The Input model and Output model are two new helpful terms I got from Scott here.&lt;/p&gt;
&lt;p&gt;Last, we have &lt;strong&gt;asp-route-&lt;anything&gt;,&lt;/strong&gt; this tag helper allows you to pass route data from the html to the method that gets called in the Page Model/Controller. The &lt;anything&gt; should map to the parameter name that the method to be called expects. This tag helper puts the route data in the query string by default.&lt;/p&gt;
&lt;p&gt;That’s it for this post. Now I’ll continue the course and will likely create a new post about what I learned.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>ASP.NET Url rewrite module</title>
            <link>https://angelocorleone.com/2018/09/asp-net-url-rewrite-module/</link>
            <pubDate>Fri, 07 Sep 2018 03:12:15 +0000</pubDate>
            
            <guid>https://angelocorleone.com/2018/09/asp-net-url-rewrite-module/</guid>
            <description>&lt;p&gt;I just received some feature requests from a client. The requests are about improving the site’s SEO rating. After adding the features, the site is now in the top 5 of google search results for “Auckland airport motel”. I used the rewrite module to move the site to SSL.&lt;/p&gt;
&lt;h2 id=&#34;a-few-sample-rules&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#a-few-sample-rules&#34;&gt;A few sample rules&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are sample rules that I believe are helpful to any site – the 2 rules below redirects to HTTPS, and picks a canonical host name (the one here is for Non-WWW).``&lt;/p&gt;
&lt;pre class=&#34;EnlighterJSRAW&#34; data-enlighter-language=&#34;xml&#34;&gt;&amp;lt;system.webServer&amp;gt;
  &amp;lt;rewrite&amp;gt;
    &amp;lt;rules&amp;gt;
      &amp;lt;rule name=&#34;Redirect to HTTPS&#34;&amp;gt;
        &amp;lt;match url=&#34;(.*)&#34; /&amp;gt;
        &amp;lt;conditions&amp;gt;
          &amp;lt;add input=&#34;{HTTPS}&#34; pattern=&#34;OFF&#34; /&amp;gt;
        &amp;lt;/conditions&amp;gt;
        &amp;lt;action type=&#34;Redirect&#34; url=&#34;https://{HTTP_HOST}{REQUEST_URI}&#34; appendQueryString=&#34;false&#34; redirectType=&#34;Permanent&#34; /&amp;gt;
      &amp;lt;/rule&amp;gt;
      &amp;lt;rule name=&#34;Canonical Host Name&#34; stopProcessing=&#34;true&#34;&amp;gt;
        &amp;lt;match url=&#34;(.*)&#34; /&amp;gt;
        &amp;lt;conditions&amp;gt;
          &amp;lt;add input=&#34;{HTTP_HOST}&#34; pattern=&#34;^www\.&#34; /&amp;gt;
        &amp;lt;/conditions&amp;gt;
        &amp;lt;action type=&#34;Redirect&#34; url=&#34;https://{HTTP_HOST}{REQUEST_URI}&#34; appendQueryString=&#34;false&#34; redirectType=&#34;Permanent&#34; /&amp;gt;
      &amp;lt;/rule&amp;gt;
    &amp;lt;/rules&amp;gt;
  &amp;lt;/rewrite&amp;gt;
&amp;lt;system.webServer&amp;gt;&lt;/pre&gt;
&lt;p&gt;The rewrite module does its job in three steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check if the incoming URL can be matched with the pattern inside the &lt;match/&gt; element&lt;/li&gt;
&lt;li&gt;If the optional &lt;conditions&gt; element is available, further compare the URL pattern to other rules you specified&lt;/li&gt;
&lt;li&gt;If the incoming URL matches the pattern or passed the conditions, execute what is inside the &lt;action&gt; element&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I found that the rewrite module can perform 3 types of actions – Redirect, Rewrite, and Custom Action. I’ll just quickly write the main difference between a &lt;strong&gt;Redirect&lt;/strong&gt; and a &lt;strong&gt;Rewrite.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A Redirect action type will change the address bar’s URL to what you specify in the &lt;action&gt; element. A Rewrite will not change that URL and will just silently send the site visitor to the URL inside the &lt;action&gt; element.&lt;/p&gt;
&lt;p&gt;I’ll use this sample URL – http://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;querystring&gt; – to quickly explain the server variables used in the rules above:&lt;/p&gt;
&lt;p&gt;the {HTTPS} variable checks if the request is secure&lt;/p&gt;
&lt;p&gt;the {HTTP_HOST} variable grabs the &lt;host&gt; part&lt;/p&gt;
&lt;p&gt;the {REQUEST_URI} grabs the &lt;path&gt; and the &lt;querystring&gt;&lt;/p&gt;
&lt;p&gt;The rewrite module is extremely flexible once you get comfortable with it. Microsoft’s detailed docs can be found &lt;a href=&#34;https://docs.microsoft.com/en-us/iis/extensions/url-rewrite-module/url-rewrite-module-configuration-reference&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Learning about ASP.NET MVC 5 Identity</title>
            <link>https://angelocorleone.com/2017/05/mvc-5-identity/</link>
            <pubDate>Mon, 15 May 2017 19:51:33 +0000</pubDate>
            
            <guid>https://angelocorleone.com/2017/05/mvc-5-identity/</guid>
            <description>&lt;p&gt;I just watched a &lt;a href=&#34;https://app.pluralsight.com/player?course=aspdotnet-mvc5-fundamentals&amp;author=scott-allen&amp;name=aspdotnet-mvc5-fundamentals-m3-identity&amp;clip=0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;video&lt;/a&gt; from Scott Allen to learn more about MVC 5 Identity on ASP.NET. By the way the video is a great resource to get a grasp of the fundamentals of ASP.NET MVC 5. I’m primarily interested on Identity, OWIN and Katana because I just brushed through them quickly while working on a team project before. I should really start posting stuff I learned during the day or during the course of a week. I think in addition to writing code and building something, writing about it helps in making it stick 🙂&lt;/p&gt;
&lt;h4 id=&#34;mvc-5-identity-8211-microsoftaspnetidentitycore&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#mvc-5-identity-8211-microsoftaspnetidentitycore&#34;&gt;MVC 5 Identity – Microsoft.AspNet.Identity.Core&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is new in MVC 5, the core assembly of MVC 5 provides interfaces that you can implement if you want full control of user creation, authentication, etc. in your application. But I think Microsoft’s implementation is good for most projects.&lt;/p&gt;
&lt;p&gt;Microsoft’s implementation relies on Entity Framework to talk with a SQL Server Db. If you want to use a different database, implement the interface provided. The diagram below is a quick overview of what I think are the most important core interfaces:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_.jpg&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-476&#34; src=&#34;https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_-300x135.jpg&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;135&#34; srcset=&#34;https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_-300x135.jpg 300w, https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_-768x346.jpg 768w, https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_-1024x462.jpg 1024w, https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_-1100x496.jpg 1100w, https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_.jpg 1596w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft is using a repository pattern on this one, the implementation will be hiding behind interfaces which I believe is a good thing. The concrete class UserManager is there to manage users. IUserStore  and its buddies –  IUserLoginStore and IUserPasswordStore, who also implements IUserStore – has methods for database access. The Role interface by the way uses the same pattern as the User interface. It has store interfaces for database access.&lt;/p&gt;
&lt;p&gt;Reiterating this, a User or Role just holds your data. UserStore etc. puts this on a Database of your choice. You then use the UserManager concrete class to orchestrate, it has your domain logic. Unless you have to do something low level.&lt;/p&gt;

&lt;h4 id=&#34;entity-framework-with-sql-server-8211-microsoftaspnetidentityentityframework&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#entity-framework-with-sql-server-8211-microsoftaspnetidentityentityframework&#34;&gt;Entity Framework with SQL Server – Microsoft.AspNet.Identity.EntityFramework&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is one implementation of the core interfaces above. Entity Framework has IdentityUser, IdentityRole, a UserStore class, which I think are the crucial ones. The UserStore class implements IUserStore, IUserLogin and IUserPassword. To talk with SQL Server, it has IdentityDbContext. In conclusion, use this unless you really need some custom implementation. Also, I suggest watching this &lt;a href=&#34;https://app.pluralsight.com/player?course=aspdotnet-mvc5-fundamentals&amp;amp;author=scott-allen&amp;amp;name=aspdotnet-mvc5-fundamentals-m1-introduction&amp;amp;clip=0&#34;&gt;video &lt;/a&gt; since it is awesome 🙂&lt;figure class=&#34;wp-block-image is-resized&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_.jpg&#34;&gt;&lt;img src=&#34;https://angelocorleone.com/wp-content/uploads/2018/04/Identity.Core_-150x150.jpg&#34; alt=&#34;&#34; class=&#34;wp-image-476&#34; width=&#34;182&#34; height=&#34;182&#34; /&gt;&lt;/a&gt;&lt;/figure&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Windows Azure configuration for ASP.NET MVC</title>
            <link>https://angelocorleone.com/2017/04/windows-azure-configurations/</link>
            <pubDate>Wed, 26 Apr 2017 08:13:05 +0000</pubDate>
            
            <guid>https://angelocorleone.com/2017/04/windows-azure-configurations/</guid>
            <description>&lt;p&gt;The ASP.NET Web API convention annoyed me so much, well because I’m not proficient in Web API yet. &lt;em&gt;By convention, your action name in Web API should match/contain the Http Verb name.&lt;/em&gt; I spent about 45 minutes trying to fix this thing! So now I hope I won’t forget that 🙂&lt;/p&gt;
&lt;h4 id=&#34;windowsazureconfiguration&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#windowsazureconfiguration&#34;&gt;Windows Azure configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;IIS or Windows Azure does not recognize DELETE, PUT and some other Http verbs by default. I found this fix online while trying to fix an Http 404 error from my Web API controller.&lt;/p&gt;
&lt;p&gt;Below is the exact code I used:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;handlers&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove name=&amp;quot;ExtensionlessUrl-Integrated-4.0&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;add name=&amp;quot;ExtensionlessUrl-Integrated-4.0&amp;quot;&amp;lt;br /&amp;gt; path=&amp;quot;*.&amp;quot;&amp;lt;br /&amp;gt; verb=&amp;quot;GET,HEAD,POST,DEBUG,DELETE,PUT&amp;quot;&amp;lt;br /&amp;gt; type=&amp;quot;System.Web.Handlers.TransferRequestHandler&amp;quot;&amp;lt;br /&amp;gt; preCondition=&amp;quot;integratedMode,runtimeVersionv4.0&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;/handlers&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the code above does not fix your issue, I read that removing “WebDav” and “WebDavModule” could help resolve the issue. Below is the complete snippet – &lt;em&gt;the snippet I used in bold&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;system.webServer&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;validation validateIntegratedModeConfiguration=&amp;quot;false&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;modules runAllManagedModulesForAllRequests=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove name=&amp;quot;WebDAVModule&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;/modules&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;handlers&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove name=&amp;quot;WebDav&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove name=&amp;quot;ExtensionlessUrl-ISAPI-4.0_32bit&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove name=&amp;quot;ExtensionlessUrlHandler-ISAPI-4.0_64bit&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove name=&amp;quot;ExtensionlessUrlHandler-Integrated-4.0&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;strong&amp;gt;&amp;lt;remove name=&amp;quot;ExtensionlessUrl-Integrated-4.0&amp;quot; /&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;add name=&amp;quot;ExtensionlessUrl-ISAPI-4.0_32bit&amp;quot; path=&amp;quot;*.&amp;quot; verb=&amp;quot;GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS&amp;quot; modules=&amp;quot;IsapiModule&amp;quot; scriptProcessor=&amp;quot;%windir%\Microsoft.NET\Framework\v4.0.30319\aspnet_isapi.dll&amp;quot; preCondition=&amp;quot;classicMode,runtimeVersionv4.0,bitness32&amp;quot; responseBufferLimit=&amp;quot;0&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;add name=&amp;quot;ExtensionlessUrlHandler-ISAPI-4.0_64bit&amp;quot; path=&amp;quot;*.&amp;quot; verb=&amp;quot;GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS&amp;quot; modules=&amp;quot;IsapiModule&amp;quot; scriptProcessor=&amp;quot;%windir%\Microsoft.NET\Framework64\v4.0.30319\aspnet_isapi.dll&amp;quot; preCondition=&amp;quot;classicMode,runtimeVersionv4.0,bitness64&amp;quot; responseBufferLimit=&amp;quot;0&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;add name=&amp;quot;ExtensionlessUrlHandler-Integrated-4.0&amp;quot; path=&amp;quot;*.&amp;quot; verb=&amp;quot;GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS&amp;quot; type=&amp;quot;System.Web.Handlers.TransferRequestHandler&amp;quot; preCondition=&amp;quot;integratedMode,runtimeVersionv4.0&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;strong&amp;gt;&amp;lt;add name=&amp;quot;ExtensionlessUrl-Integrated-4.0&amp;quot; path=&amp;quot;*.&amp;quot;&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;strong&amp;gt; verb=&amp;quot;GET,HEAD,POST,DEBUG,PUT,DELETE,PATCH,OPTIONS&amp;quot;&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;strong&amp;gt; type=&amp;quot;System.Web.Handlers.TransferRequestHandler&amp;quot;&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;strong&amp;gt; preCondition=&amp;quot;integratedMode,runtimeVersionv4.0&amp;quot; /&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;/handlers&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;/system.webServer&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;usual-media-types-to-add-to-your-windows-azure-configuration&#34; class=&#34;anchor-link&#34;&gt;&lt;a href=&#34;#usual-media-types-to-add-to-your-windows-azure-configuration&#34;&gt;Usual Media types to add to your Windows Azure configuration&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The code snippet below is for media types we usually use on the web to keep IIS or Windows Azure happy serving static content, you can add/remove stuff depending on your needs. _Please note this is also inside &amp;lt;_system.webServer&amp;gt; of your Web.config.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;staticContent&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.eot&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.ttf&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.otf&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.woff&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.mp4&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.ogv&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.webm&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;remove fileExtension=&amp;quot;.svg&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.eot&amp;quot; mimeType=&amp;quot;application/vnd.ms-fontobject&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.ttf&amp;quot; mimeType=&amp;quot;font/ttf&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.otf&amp;quot; mimeType=&amp;quot;font/otf&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.woff&amp;quot; mimeType=&amp;quot;application/font-woff&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.woff2&amp;quot; mimeType=&amp;quot;application/font-woff2&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.mp4&amp;quot; mimeType=&amp;quot;video/mp4&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.ogv&amp;quot; mimeType=&amp;quot;video/ogg&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.webm&amp;quot; mimeType=&amp;quot;video/webm&amp;quot; /&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;mimeMap fileExtension=&amp;quot;.svg&amp;quot; mimeType=&amp;quot;image/svg+xml&amp;quot;/&amp;gt;&amp;lt;br /&amp;gt; &amp;lt;/staticContent&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I think you have noticed this by now as well, it is good practice to remove something in your Web.config first before adding it again, to make sure you don’t get duplicates. That’s it for tonight 🙂&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>